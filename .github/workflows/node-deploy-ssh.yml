name: Deploy Node Application

on:
  workflow_call:
    inputs:
      NAME:
        required: true
        type: string
      PROJECT_PATH:
        required: true
        type: string
      ENV_FILE_PATH:
        required: false
        type: string
      RUN_MIGRATION:
        required: false
        type: boolean
      RUN_TESTS:
        required: false
        type: boolean
      EXECUTE_DEPLOYMENT:
        required: false
        type: boolean
      REDEPLOY:
        required: false
        type: boolean
      BUILD_DIR_NAME:
        required: false
        type: string
        default: "build"
      SSH_HOST:
        required: true
        type: string
    secrets:
      SSH_KEY:
        required: true
      SSH_USER:
        required: true
      GH_TOKEN:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Pull Env file from Config
        if: ${{ inputs.ENV_FILE_PATH != '' && inputs.REDEPLOY != true }}
        run: |
          GH_TOKEN=$GH_TOKEN
          FILE_URL="https://api.github.com/repos/${{ github.repository_owner }}${{ inputs.ENV_FILE_PATH }}"
          DOWNLOAD_URL=$(curl -sH "Authorization: token $GH_TOKEN" "$FILE_URL" | grep -oP '(?<="download_url": ")[^"]+')
          if [[ -z "$DOWNLOAD_URL" ]]; then
           echo "Error: Failed to fetch download URL for the file." >&2
           exit 1
          fi
          wget "$DOWNLOAD_URL" -O ".env" || { echo "Error: Failed to download file." >&2; exit 1; }
          echo "Download successful, this will be used the artifact"
        env:
          FILE_PATH: ${{ inputs.ENV_FILE_PATH }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Export GH Token
        run: |
          if [ -n "${{ secrets.GH_TOKEN }}" ]; then
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" > ~/.npmrc
          fi

      - name: Install dependencies
        if: ${{ inputs.REDEPLOY != true }}
        run: npm install --frozen-lockfile

      - name: Run the tests
        if: ${{ inputs.RUN_TESTS == true && inputs.REDEPLOY != true }}
        run: npm run test

      - name: Build
        if: ${{ inputs.EXECUTE_DEPLOYMENT == true && inputs.REDEPLOY != true }}
        run: CI=false npm run build

      - name: Compress build directory
        if: ${{ inputs.EXECUTE_DEPLOYMENT == true && inputs.REDEPLOY != true }}
        run: tar -czf nodejs-build-${{ inputs.NAME }}.${{ github.run_number }}.tar.gz ${{ inputs.BUILD_DIR_NAME }}

      - name: Copy artifact to server
        if: ${{ inputs.EXECUTE_DEPLOYMENT == true && inputs.REDEPLOY != true }}
        run: |
          echo "${{ secrets.SSH_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          ls -lrth
          scp -o StrictHostKeyChecking=no -i /tmp/deploy_key nodejs-build-${{ inputs.NAME }}.${{ github.run_number }}.tar.gz ${{ secrets.SSH_USER }}@${{ inputs.SSH_HOST }}:/tmp
          rm /tmp/deploy_key

      - name: Extract artifact, run migration, test and restart
        if: ${{ inputs.EXECUTE_DEPLOYMENT == true && inputs.REDEPLOY != true }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ inputs.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          username: ${{ secrets.SSH_USER }}
          script: |
            git config --global --add safe.directory ${{ inputs.PROJECT_PATH }}
            cd ${{ inputs.PROJECT_PATH }}
            git checkout -- .
            git pull
            npm install
            if [[ -n "${{ inputs.ENV_FILE_PATH }}" ]]; then
              FILE_URL="https://api.github.com/repos/${{ github.repository_owner }}${{ inputs.ENV_FILE_PATH }}"
              DOWNLOAD_URL=$(curl -sH "Authorization: token ${{ secrets.GH_TOKEN }}" "$FILE_URL" | grep -oP '(?<="download_url": ")[^"]+')
              if [[ -z "$DOWNLOAD_URL" ]]; then
                echo "Error: Failed to fetch env file download URL for the file." >&2
                exit 1
              fi
              wget "$DOWNLOAD_URL" -O "tmp.env" || { echo "Error: Failed to download env file." >&2; exit 1; }
              mkdir -p env-bk
              mv .env env-bk/.env-$(date +"%Y-%m-%d-%H-%M-%S")
              mv tmp.env .env
            fi
            if [[ ${{ inputs.RUN_MIGRATION }} == 'true' ]]; then
              npm run migrate:run
            fi
            if [[ ${{ inputs.RUN_TESTS }} == 'true' ]]; then
              npm run test
            fi
            tar -xzf /tmp/nodejs-build-${{ inputs.NAME }}.${{ github.run_number }}.tar.gz -C .
            npm run deploy

      - name: Refresh .env and redeploy
        if: ${{ inputs.REDEPLOY == true }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ inputs.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          username: ${{ secrets.SSH_USER }}
          script: |
            git config --global --add safe.directory ${{ inputs.PROJECT_PATH }}
            cd ${{ inputs.PROJECT_PATH }}
            if [[ -n "${{ inputs.ENV_FILE_PATH }}" ]]; then
              FILE_URL="https://api.github.com/repos/${{ github.repository_owner }}${{ inputs.ENV_FILE_PATH }}"
              DOWNLOAD_URL=$(curl -sH "Authorization: token ${{ secrets.GH_TOKEN }}" "$FILE_URL" | grep -oP '(?<="download_url": ")[^"]+')
              if [[ -z "$DOWNLOAD_URL" ]]; then
                echo "Error: Failed to fetch env file download URL for the file." >&2
                exit 1
              fi
              wget "$DOWNLOAD_URL" -O "tmp.env" || { echo "Error: Failed to download env file." >&2; exit 1; }
              mkdir -p env-bk
              mv .env env-bk/.env-$(date +"%Y-%m-%d-%H-%M-%S")
              mv tmp.env .env
            fi
            npm run deploy
